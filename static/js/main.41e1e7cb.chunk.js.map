{"version":3,"sources":["components/Cell.js","components/Board.js","components/History.js","utils/LocalStorage.js","components/Game.js","App.js","index.js"],"names":["Cell","row","col","val","onClick","winner","isWinningCell","notClickable","hasPlayer","winningCellClass","type","className","defaultProps","Board","board","size","points","id","map","iRow","key","cell","iCol","some","numToWin","History","history","jumpTo","toggleSort","selected","sort","sortIcon","Card","Content","Button","icon","label","Description","List","p1","p2","step","lastPosition","desc","x","y","isSelect","Item","primary","fluid","WriteHistory","localStorage","removeItem","setItem","JSON","stringify","ReadHistory","data","getItem","parse","EmptyHistory","Array","fill","Game","props","current","setState","xIsNext","stepNumber","handleClick","X","O","DRAW","state","slice","currentBoard","length","arr","result","isTerminated","strWinner","hasWinner","isFull","concat","resetGame","open","toggleConfirm","checkingHorizontal","isBlockOutAbove","isBlockOutBelow","curPlayer","count","push","i","checkingVertical","checkingMainDiagonal","j","checkingSubDiagonal","retH","retV","retM","retS","desPoints","splice","every","sortASC","this","player","Header","as","Confirm","header","content","onCancel","onConfirm","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41e1e7cb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ row, col, val, onClick, winner, isWinningCell }) => {\n  let notClickable = ' not-clickable';\n\n  if (!winner && !val) {\n    notClickable = '';\n  }\n\n  const hasPlayer = val ? ` player ${val}` : '';\n\n  const winningCellClass = isWinningCell ? ' winning-cell' : '';\n\n  return (\n    <button\n      type='button'\n      className={`board-cell${hasPlayer + notClickable + winningCellClass}`}\n      onClick={() => onClick(row, col)}\n    >\n      {val}\n    </button>\n  );\n};\n\nCell.defaultProps = {\n  val: null,\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nconst Board = ({ board, size, onClick, winner, points }) => {\n  const renderBoard = () => {\n    return board.map((row, iRow) => {\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <div key={iRow} className='board-row'>\n          {row.map((cell, iCol) => {\n            // check ô này có nằm trong danh sách point win hay không\n            const isWinningCell =\n              points &&\n              points.some(val => val.row === iRow && val.col === iCol);\n            return (\n              <Cell\n                // eslint-disable-next-line react/no-array-index-key\n                key={iRow * size + iCol}\n                row={iRow}\n                col={iCol}\n                val={cell}\n                // eslint-disable-next-line no-shadow\n                onClick={onClick}\n                winner={winner}\n                isWinningCell={isWinningCell}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  };\n  return <div id='board'>{renderBoard()}</div>;\n};\n\nBoard.defaultProps = {\n  size: 20,\n  numToWin: 5,\n};\n\nexport default Board;\n","import React from 'react';\r\nimport { Card, List, Button } from 'semantic-ui-react';\r\n\r\nconst History = ({ history, jumpTo, toggleSort, selected, sort }) => {\r\n  const renderMoves = () => {\r\n    if (!history) return <></>;\r\n\r\n    // default : sort = true\r\n    history.sort((p1, p2) => {\r\n      return p1.id <= p2.id === sort ? -1 : 1;\r\n    });\r\n\r\n    return history.map(step => {\r\n      const { lastPosition, id } = step;\r\n      const desc = id\r\n        ? `Move to #${id}. Position [${lastPosition.x},${lastPosition.y}]`\r\n        : 'Go to game start';\r\n\r\n      const isSelect = id === selected;\r\n      return (\r\n        // eslint-disable-next-line react/no-array-index-key\r\n        <List.Item key={id}>\r\n          <Button\r\n            primary={isSelect}\r\n            size='small'\r\n            fluid\r\n            onClick={() => jumpTo(id)}\r\n          >\r\n            {desc}\r\n          </Button>\r\n        </List.Item>\r\n      );\r\n    });\r\n  };\r\n\r\n  const sortIcon = sort ? 'angle down' : 'angle up';\r\n\r\n  return (\r\n    <Card className='history-block'>\r\n      <Card.Content>\r\n        <div className='box-title'>\r\n          <h6 className='history-title'>History</h6>\r\n          <Button\r\n            size='mini'\r\n            icon={sortIcon}\r\n            onClick={toggleSort}\r\n            label='Order by'\r\n          />\r\n        </div>\r\n\r\n        <Card.Description className='history-items'>\r\n          <List>{renderMoves()}</List>\r\n        </Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","function WriteHistory(history) {\r\n  localStorage.removeItem('history');\r\n  localStorage.setItem('history', JSON.stringify(history));\r\n}\r\n\r\nfunction ReadHistory() {\r\n  const data = localStorage.getItem('history');\r\n  return JSON.parse(data);\r\n}\r\n\r\nfunction EmptyHistory(size) {\r\n  const history = [\r\n    {\r\n      board: new Array(size).fill(null).map(() => new Array(size).fill(null)),\r\n      lastPosition: null,\r\n      id: 0,\r\n    },\r\n  ];\r\n  WriteHistory(history);\r\n}\r\n\r\nexport { WriteHistory, ReadHistory, EmptyHistory };\r\n","import React, { Component } from 'react';\nimport { Card, Button, Confirm } from 'semantic-ui-react';\nimport Board from './Board';\nimport History from './History';\nimport { ReadHistory, WriteHistory, EmptyHistory } from '../utils/LocalStorage';\n\nclass Game extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      xIsNext: true,\n      winner: null,\n      open: false,\n      stepNumber: 0,\n      sortASC: true,\n    };\n\n    EmptyHistory(props.size);\n  }\n\n  jumpTo = step => {\n    // lay winner trong history\n    const current = ReadHistory()[step];\n\n    this.setState({\n      xIsNext: step % 2 === 0,\n      stepNumber: step,\n      winner: current.winner,\n    });\n  };\n\n  handleClick = (row, col) => {\n    const { X, O, DRAW } = this.props;\n    const { winner, xIsNext, stepNumber } = this.state;\n\n    let history = ReadHistory().slice(0, stepNumber + 1);\n\n    // clone 2d array. vì khi slice thì array 1d chỉ là tham chiếu địa chỉ\n    const currentBoard = history[history.length - 1].board.map(arr => [...arr]);\n\n    if (winner || currentBoard[row][col]) return;\n\n    currentBoard[row][col] = xIsNext ? X : O;\n\n    const result = this.isTerminated(currentBoard, row, col);\n\n    let strWinner = null;\n    if (!result.hasWinner && this.isFull(currentBoard)) strWinner = DRAW;\n    else if (result.hasWinner) strWinner = currentBoard[row][col];\n\n    history = history.concat([\n      {\n        board: currentBoard,\n        lastPosition: { x: row, y: col },\n        id: stepNumber + 1,\n        winner: strWinner,\n        points: result.points,\n      },\n    ]);\n\n    WriteHistory(history);\n\n    this.setState({\n      xIsNext: !xIsNext,\n      stepNumber: history.length - 1,\n      winner: strWinner,\n    });\n  };\n\n  resetGame = () => {\n    const { size } = this.props;\n    EmptyHistory(size);\n    this.setState({\n      xIsNext: true,\n      winner: null,\n      open: false,\n      stepNumber: 0,\n    });\n  };\n\n  toggleConfirm = () => {\n    const { open } = this.state;\n    this.setState({\n      open: !open,\n    });\n  };\n\n  checkingHorizontal = (board, row, col) => {\n    const points = [];\n\n    const { size, numToWin } = this.props;\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = col - 1; i >= 0; i -= 1) {\n      if (board[row][i] === curPlayer) {\n        count += 1;\n        points.push({ row, col: i });\n      } else {\n        if (board[row][i] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n    for (let i = col + 1; i < size; i += 1) {\n      if (board[row][i] === curPlayer) {\n        count += 1;\n        points.push({ row, col: i });\n      } else {\n        if (board[row][i] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    // if (count >= numToWin) {\n    //   if (count > numToWin) {\n    //     return true;\n    //   }\n    //   return !(isBlockOutAbove && isBlockOutBelow);\n    // }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  checkingVertical = (board, row, col) => {\n    const points = [];\n    const { size, numToWin } = this.props;\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1; i >= 0; i -= 1) {\n      if (board[i][col] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col });\n      } else {\n        if (board[i][col] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n    for (let i = row + 1; i < size; i += 1) {\n      if (board[i][col] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col });\n      } else {\n        if (board[i][col] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  checkingMainDiagonal = (board, row, col) => {\n    const points = [];\n    const { size, numToWin } = this.props;\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; i -= 1, j -= 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < size && j < size; i += 1, j += 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  checkingSubDiagonal = (board, row, col) => {\n    const points = [];\n    const { size, numToWin } = this.props;\n\n    let isBlockOutAbove = false;\n    let isBlockOutBelow = false;\n\n    const curPlayer = board[row][col];\n    // count = 1 la vi tri hien tai.\n    let count = 1;\n    points.push({ row, col });\n\n    // dem ve 2 ben\n    for (let i = row - 1, j = col + 1; i >= 0 && j < size; i -= 1, j += 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutAbove = true;\n        }\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < size && j >= 0; i += 1, j -= 1) {\n      if (board[i][j] === curPlayer) {\n        count += 1;\n        points.push({ row: i, col: j });\n      } else {\n        if (board[i][j] !== null) {\n          isBlockOutBelow = true;\n        }\n        break;\n      }\n    }\n\n    if (count >= numToWin) {\n      if (count > numToWin) {\n        return {\n          hasWinner: true,\n          points,\n        };\n      }\n      return {\n        hasWinner: !(isBlockOutAbove && isBlockOutBelow),\n        points: !(isBlockOutAbove && isBlockOutBelow) ? points : [],\n      };\n    }\n    return {\n      hasWinner: false,\n      points: [],\n    };\n  };\n\n  isTerminated = (board, row, col) => {\n    const retH = this.checkingHorizontal(board, row, col);\n    const retV = this.checkingVertical(board, row, col);\n    const retM = this.checkingMainDiagonal(board, row, col);\n    const retS = this.checkingSubDiagonal(board, row, col);\n\n    const desPoints = retH.points.concat(retV.points, retM.points, retS.points);\n\n    for (let i = 0; i < desPoints.length - 1; i += 1) {\n      for (let j = i + 1; j < desPoints.length; j += 1) {\n        if (\n          desPoints[i].row === desPoints[j].row &&\n          desPoints[i].col === desPoints[j].col\n        ) {\n          desPoints.splice(i, 1);\n        }\n      }\n    }\n\n    const ret = {\n      hasWinner:\n        retH.hasWinner || retV.hasWinner || retM.hasWinner || retS.hasWinner,\n      points: desPoints,\n    };\n    return ret;\n  };\n\n  isFull = board => {\n    return board.every(row => {\n      return row.every(cell => cell);\n    });\n  };\n\n  toggleSort = () => {\n    const { sortASC } = this.state;\n    this.setState({\n      sortASC: !sortASC,\n    });\n  };\n\n  render() {\n    /*\n\n    history = [{\n      board : ....,\n      lastPosition: {x, y}\n      id -> stepNumber,\n      winner,\n      points\n    }]\n\n    */\n    const history = ReadHistory();\n\n    const { xIsNext, open, winner, stepNumber, sortASC } = this.state;\n    const { board: current, points } = history[stepNumber];\n\n    const { X, O } = this.props;\n\n    const player = xIsNext ? X : O;\n\n    const showPlayer = () => {\n      if (winner) {\n        return (\n          <>\n            Winner: &nbsp;\n            <span className={`player${` ${winner}`}`}>{winner}</span>\n          </>\n        );\n      }\n\n      return (\n        <>\n          Player: &nbsp;\n          <span className={`player${` ${player}`}`}>{player}</span>\n        </>\n      );\n    };\n\n    return (\n      <div className='game-wrapper'>\n        <Card className='game-info'>\n          <Card.Content>\n            <Card.Header as='h1'>Caro Vietnam - v2</Card.Header>\n            <Card.Description>\n              <p>{showPlayer()}</p>\n\n              <Button size='small' onClick={this.toggleConfirm}>\n                Reset game\n              </Button>\n            </Card.Description>\n          </Card.Content>\n        </Card>\n\n        <Board\n          points={points}\n          board={current}\n          xIsNext={xIsNext}\n          onClick={this.handleClick}\n          winner={winner}\n        />\n\n        <History\n          history={history}\n          sort={sortASC}\n          toggleSort={this.toggleSort}\n          jumpTo={this.jumpTo}\n          selected={stepNumber}\n        />\n\n        <Confirm\n          open={open}\n          size='tiny'\n          header='Reset game'\n          content='Do you want to reset this game?'\n          onCancel={this.toggleConfirm}\n          onConfirm={this.resetGame}\n        />\n      </div>\n    );\n  }\n}\n\nGame.defaultProps = {\n  size: 20,\n  numToWin: 5,\n  X: 'X',\n  O: 'O',\n  DRAW: 'XO',\n};\n\nexport default Game;\n","import React from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Game from './components/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}